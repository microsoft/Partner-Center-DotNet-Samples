strategy:
  matrix:
    Windows:
      imageName: 'windows-2019'
      
trigger:
- master

pool:
  vmImage: $(imageName)

variables:
  solution: '$(Build.SourcesDirectory)/**/sdk/*.sln;$(Build.SourcesDirectory)/**/secure-app-model/**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: CredScan@2
  displayName: CredScan
  inputs:
    toolMajorVersion: 'V2'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: PoliCheck@1
  displayName: PoliCheck
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: NuGetToolInstaller@1
  displayName: Use NuGet 5.4.0
  inputs:
    versionSpec: 5.4.0
      
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0 
  displayName: 'Component Detection'
  
- task: BinSkim@3
  displayName: BinSkim
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTarget: 'sdk\SdkSamples\bin\$(buildConfiguration)\*.dll;'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
